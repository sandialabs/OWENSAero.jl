var documenterSearchIndex = {"docs":
[{"location":"reference/reference/#Index","page":"API Reference","title":"Index","text":"","category":"section"},{"location":"reference/reference/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"reference/reference/#Types-and-functions","page":"API Reference","title":"Types and functions","text":"","category":"section"},{"location":"reference/reference/#OWENSAero.Environment","page":"API Reference","title":"OWENSAero.Environment","text":"Environment(rho::TF,mu::TF,Vx::TAF #Vinf is Vx,Vy::TAF,Vz::TAF,Vtwist::TAF,windangle::TF #radians,DynamicStallModel::TS,AeroModel::TS,awwarm::TVF,steplast::TAI,idxRPI::TAI,Vwakeold::TVF2,BVDynamicFlagL::TAI,BVDynamicFlagD::TAI,alphalast::TAF2,suction::TB) Environment(rho,mu,Vx,Vy,Vz,Vtwist,windangle,DynamicStallModel,AeroModel,awwarm) = Environment(rho,mu,Vx,Vy,Vz,Vtwist,windangle,DynamicStallModel,AeroModel,awwarm,zeros(Int,1),zeros(Int,length(Vx)),deepcopy(Vx),zeros(Int,1),zeros(Int,1),zeros(Real,1),false) Environment(rho,mu,Vx,DynamicStallModel,AeroModel,awwarm) = Environment(rho,mu,Vx,zeros(Real,size(Vx)),zeros(Real,size(Vx)),zeros(Real,size(Vx)),0.0,DynamicStallModel,AeroModel,awwarm,zeros(Int,1),zeros(Int,length(Vx)),deepcopy(Vx),zeros(Int,1),zeros(Int,1),zeros(Real,1),false)\n\nContains specications for turbine slice environment/operating conditions as well as some backend memory for dynamic stall and unsteady calculations\n\nInputs\n\nrho::TF: Working fluid density (kg/m^3)\nmu::TF: Working fluid viscosity (standard SI units)\nV_x::TAF Vinf is Vx for simple simulations (m/s), array corresponding to each azimuthal position\nV_y::TAF: y input velocity (m/s), array corresponding to each azimuthal position\nV_z::TAF: z input velocity (m/s), array corresponding to each azimuthal position\nV_twist::TAF: rotational velocity from active twist (rad/s), array corresponding to each azimuthal position\nwindangle::TF: angle of mean oncoming wind (rad)\nDynamicStallModel::TS: dynamic stall model (\"BV\" or \"none\" or \"LB\" - once it is finished)\nAeroModel::TS: aero model used (\"DMS\" or \"AC\")\naw_warm::TVF: warm start induction factor array, first half corresponding to u, second half to v\nsteplast::TAI: prior simulation step index, used for unsteady wake propogation\nidx_RPI::TAI: used to specify the azimuthal indices needed for a partial solve (i.e. not every azimuthal index), such as is used in the RPI method\nV_wake_old::TVF2: Prior step's mean wake velocity (m/s)\nBV_DynamicFlagL::TAI: Boeing-vertol dynamic stall lift flag\nBV_DynamicFlagD::TAI: Boeing-vertol dynamic stall drag flag\nalpha_last::TAF2: Boeing-vertol dynamic stall prior step's angle of attack\nsuction::TB: DMS flag for alternate induction model\n\nOutputs:\n\nnone:\n\n\n\n\n\n","category":"type"},{"location":"reference/reference/#OWENSAero.Turbine","page":"API Reference","title":"OWENSAero.Turbine","text":"Turbine(R::TF,r::TAF,z::TF,chord::TAF3,twist::TAF5,delta::TAF,omega::TAF4,B::TI,af::TFN,ntheta::TI,r_delta_influence::TB,centerX::TAF2,centerY::TAF2)\nTurbine(R,r,z,chord,twist,delta,omega,B,af,ntheta,r_delta_infl) = Turbine(R,r,z,chord,twist,delta,omega,B,af,ntheta,r_delta_infl,zeros(Real,size(R)),zeros(Real,size(R)))\nTurbine(R,r,chord,twist,delta,omega,B,af,ntheta,r_delta_infl) = Turbine(R,r,1.0,chord,twist,delta,omega,B,af,ntheta,r_delta_infl,zeros(Real,size(R)),zeros(Real,size(R)))\n\nContains specications for turbine slice (geometry, location, airfoil)\n\nInputs\n\nR::TF: Nominal turbine radius (m)\nr::TAF: Array of local radaii corresponding to each azimuthal position for the slice, allows for active blade deformation (m)\nz::TF: Vertical location of slice (only used when calling inflow-wind turbulent input)(m)\nchord::TAF3: Array of chord corresponding to each azimuthal position, allows for active blade deformation (m)\ntwist::TAF5: Array of blade twist corresponding to each azimuthal position, allows for active blade deformation (rad)\ndelta::TAF: Array of blade slope corresponding to each azimuthal position, allows for active blade deformation (rad)\nomega::TAF4: Array of rotational rate corresponding to each azimuthal position, allows for active blade deformation (rad/s)\nB::TI: Number of blades\naf::TFN: Airfoil function - see tests for example of how to create\nntheta::TI: Number of azimuthal discretizations\nr_delta_influence::TB: Specification of whether local radius and blade slope are used in the influence coefficients for the actuator cylinder method\ncenterX::TAF2: Turbine center x location (only used if multiple turbines are modeled)\ncenterY::TAF2: Turbine center y location (only used if multiple turbines are modeled)\n\nOutputs:\n\nnone:\n\n\n\n\n\n","category":"type"},{"location":"reference/reference/#OWENSAero.UnsteadyParams","page":"API Reference","title":"OWENSAero.UnsteadyParams","text":"UnsteadyParams(RPI::TB,tau::TAF,ifw::TB,IECgust::TB,nominalVinf::TF,G_amp::TF,gustX0::TF,gustT::TF) UnsteadyParams(RPI,tau,ifw) = UnsteadyParams(RPI,tau,ifw,false,1.0,0.0,1.0,1.0)\n\nContains specications for turbine slice unsteady inputs\n\nInputs\n\nRPI::TB: Flag to specify if RPI is being used\ntau::TAF: Unsteady method wake propogation weighting [3.0,0.3]\nifw::TB: Flag to specify if inflow-wind is being used\nIECgust::TB: Flag to specify if the simple sin-cos gust profile in the x-direction will be used\nnominalVinf::TF: Nominal velocity used to calculate the IEC gust size (m/s)\nG_amp::TF: IEC gust amplitude (m/s)\ngustX0::TF: IEC gust normalized starting point (x-location divided by reference radius)\ngustT::TF: IEC gust duration (s)\n\nOutputs:\n\nnone:\n\n\n\n\n\n","category":"type"},{"location":"reference/reference/#OWENSAero.AC-Tuple{Any, Any}","page":"API Reference","title":"OWENSAero.AC","text":"AC(turbines, env; w=zeros(Real,2turbines[1].ntheta), idx_RPI=1:2turbine.ntheta, solve=true, ifw=false)\n\nsee ?steady for detailed i/o description\n\nDouble multiple streamtube model\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSAero.AyIJ-NTuple{5, Any}","page":"API Reference","title":"OWENSAero.AyIJ","text":"integrand used for computing AIJ\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSAero.Ayintegrand-NTuple{5, Any}","page":"API Reference","title":"OWENSAero.Ayintegrand","text":"integrand used for computing Ay\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSAero.Boeing_Vertol-NTuple{11, Any}","page":"API Reference","title":"OWENSAero.Boeing_Vertol","text":"Boeing_Vertol(af,alpha,adotnorm,umach,Re,aoaStallPos,aoaStallNeg,AOA0,tc,BV_DynamicFlagL,BV_DynamicFlagD; family_factor = 0.0)\n\nBoeing-Vertol Dynamic Stall Model. All angles are in rad unless explicitely stated otherwise (e.g. alpha_d) Arguments\n\naf::airfoil_data4D: airfoil function callable by: CL, CD, CM = af(aoa,Re,mach,family_factor)\nalpha::Float64: Static Angle of Attack (at 0.75 chord)\nadotnorm::Float64: Normalized Change in Angle of Attack adotc/(2U)\numach::Float64: Blade mach number\nRe::Float64: Blade Reynolds number\naoaStallPos::Float64: Positive Stall Angle (onset)\naoaStallNeg::Float64: Negative Stall Angle (onset)\nAOA0::Float64: Zero Lift AOA\ntc::Float64: Thickness to chord ratio\nBV_DynamicFlagL::Int: lagged dynamic stall state for lift\nBV_DynamicFlagD::Int: lagged dynamic stall state for drag\nfamily_factor::float64: factor indexing airfoil family, if used\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSAero.DMS-Tuple{Any, Any}","page":"API Reference","title":"OWENSAero.DMS","text":"DMS(turbine, env; w=0, idx_RPI=1:turbine.ntheta, solve=true)\n\nsee ?steady for detailed i/o description\n\nDouble multiple streamtube model\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSAero.DxII-Tuple{Any}","page":"API Reference","title":"OWENSAero.DxII","text":"integrand used for computing DxII\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSAero.DxIJ-NTuple{5, Any}","page":"API Reference","title":"OWENSAero.DxIJ","text":"integrand used for computing DxIJ\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSAero.Dxintegrand-NTuple{5, Any}","page":"API Reference","title":"OWENSAero.Dxintegrand","text":"integrand used for computing Dx\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSAero.Unsteady_Step-NTuple{4, Any}","page":"API Reference","title":"OWENSAero.Unsteady_Step","text":"Unsteady_Step(turbine,env,us_param,mystep)\n\ncalls inflow wind init\n\nInputs\n\nturbine::Turbine: turbine input for slice see ?Turbine\nenv::Env: environment input for slice see ?Env\nus_param::UnsteadyParams: unsteady inputs for slice see ?UnsteadyParams\nmystep::int: continuous index cooresponding to the azimuthal discretation - i.e. for ntheta of 30 step 1 is the first step of rev 1, sep 31 is the first step of rev 2, etc.  Keeps track of temporal locaion\n\nOutputs:\n\nCP: This slice's coefficient of performance at this step\nTh: This slice's thrust coefficient at this step\nQ: Torque (N0m) at this step\nRp: Radial force per height (N) at this step\nTp: Tangential force per height (N) at this step\nZp: Vertical force per height (N) at this step\nVloc: Local velocity array for each azimuthal position (includes induction) (m/s) at this step\nCD: This slice's drag coefficient at this step\nCT: This slice's thrust coefficient (should equal drag, but may no depending on usage or solver status) at this step\namean: Mean turbine induction in the streamwise direction at this step\nastar: Solved induction factors for each azimuthal location. First half are streamwise (u), second are cross-steam (v) at this step\nalpha: Local angle of attack array for each azimuthal position (includes induction) (rad) at this step\ncl: Local lift coefficient used for each azimuthal position at this step\ncd_af: Local drag coefficient used for each azimuthal position at this step\nthetavec: Azimuthal location of each discretization (rad)\nRe: Reynolds number for each azimuthal position at this step\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSAero.WxII-Tuple{Any}","page":"API Reference","title":"OWENSAero.WxII","text":"integrand used for computing WxII\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSAero.WxIJ-Tuple{Any, Any, Any}","page":"API Reference","title":"OWENSAero.WxIJ","text":"integrand used for computing WxIJ\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSAero.advanceTurb-Tuple{Any}","page":"API Reference","title":"OWENSAero.advanceTurb","text":"advanceTurb(tnew;ts=2*pi/(turbslices[1].omega[1]*turbslices[1].ntheta))\n\nRuns a previously initialized aero model (see ?setupTurb) in the unsteady mode (can be repeateadly called, or called for a specific time, or repeatedly called for sections of time)\n\nInputs\n\ntnew::float: new time (s); will run from last time specified from the last call, to the current time specified, or from t=ts if the first time called\nts::float: optional, desired timestep.  Will run at finer timesteps than the azimuthal discretization without interfering with wake propogation.  While possible, it is not recommended to run with timesteps larger than the azimuthal discretization (hence the optional nature and automatic calculation)\n\nOutputs:\n\nCP: Turbine coefficient of performance\nRp: Array(B,Nslices,nsteps) of radial force (N) where nsteps = max(1,round(Int,(tnew-timelast)/ts))\nTp: Array(B,Nslices,n_steps) of tangential force (N)\nZp: Array(B,Nslices,n_steps) of vertical force (N)\nalpha: Array(B,Nslices,n_steps) of angle of attack (rad)\ncl: Array(B,Nslices,n_steps) of airfoil cl used\ncd_af: Array(B,Nslices,n_steps) of airfoil cd used\nVloc: Array(B,Nslices,n_steps) of airfoil local velocity used\nRe: Array(B,Nslices,n_steps) of airfoil Reynolds number used\nthetavec: Azimuthal discretization location (rad)\nntheta: number of azimuthal discretizations used\nFx_base: Array(ntheta)Turbine base Fx (N)\nFy_base: Array(ntheta)Turbine base Fy (N)\nFz_base: Array(ntheta)Turbine base Fz (N)\nMx_base: Array(ntheta)Turbine base Mx (N-m)\nMy_base: Array(ntheta)Turbine base My (N-m)\nMz_base: Array(ntheta)Turbine base Mz (N-m)\npower: Array(ntheta)Turbine power (watts)\npower2: Turbine average power for the revolution (watts)\ntorque: Array(ntheta)Turbine torque (N-m) (alternative calculation method from Mz-base)\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSAero.deformTurb-Tuple{Any}","page":"API Reference","title":"OWENSAero.deformTurb","text":"deformTurb(azi;newOmega=-1,newVinf=-1,bldx=-1,     bldz=-1,     bld_twist=-1,     steady=false)\n\nEquivalent to an update states call, mutating the internal aerodynamic inputs within the unsteady model.\n\nInputs\n\nazi: Current azimuth position of the turbine in radians (continuously growing with numbers of revolutions)\nbld_x: Blade structural x shape, size(NBlade,any), any as it is splined against bld_z and the aero discretization\nbld_z: Blade structural z shape, size(NBlade,any), any as it is splined against bld_x and the aero discretization\nbld_twist: Blade structural twist, size(NBlade,any), any as it is splined against bld_z and the aero discretization.  Note that in the calcs, this will be in addition to the aero twist offset already applied in initialization.\naccel_flap_in: Blade structural acceleration in the flap direction, size(NBlade,any), any as it is splined against bld_z and the aero discretization\naccel_edge_in: Blade structural acceleration in the edge direction, size(NBlade,any), any as it is splined against bld_z and the aero discretization\nsteady::bool: if steady is true, it just updates a single step.  TODO: verify this is correct\n\nOutputs:\n\nnone:\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSAero.matrixAssemble-NTuple{5, Any}","page":"API Reference","title":"OWENSAero.matrixAssemble","text":"Internal, assembles the matrices of multiple turbine systems into a combined system centerX, centerY: array of x,y coordinates for centers of the VAWTs in the farm radii: corresponding array of their radii\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSAero.pInt-Tuple{Any, Any}","page":"API Reference","title":"OWENSAero.pInt","text":"Internal, integration for a periodic function where end points don't reach ends (uses trapezoidal method)\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSAero.panelIntegration-NTuple{6, Any}","page":"API Reference","title":"OWENSAero.panelIntegration","text":"applies for both Ay and Rx depending on which function ifunc(x, y, phi) is passed in\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSAero.precomputeMatrices-NTuple{4, Any}","page":"API Reference","title":"OWENSAero.precomputeMatrices","text":"Internal, precomputes influence coefficient matricies and saves them as HDF5 files\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSAero.radialforce-NTuple{5, Any}","page":"API Reference","title":"OWENSAero.radialforce","text":"Internal, calculates the radial force used in the residual function as well as the turbine performance when converged\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSAero.readaerodyn-Tuple{Any}","page":"API Reference","title":"OWENSAero.readaerodyn","text":"readaerodyn(filename)\n\ncreate airfoil lookup for a file with only one reynolds number\n\nInputs\n\nfilename::string: file path/name to airfoil file formatted like in the test folder\n\nOutputs:\n\naf::function: cl, cd = af(alpha,re,mach) with alpha in rad\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSAero.readaerodyn_BV-Tuple{Any}","page":"API Reference","title":"OWENSAero.readaerodyn_BV","text":"readaerodyn_BV(filename)\n\ncreate airfoil lookup function with boeing vertol dynamic stall model for a file with only one reynolds number\n\nInputs\n\nfilename::string: file path/name to airfoil file formatted like in the test folder\n\nOutputs:\n\naf::function: cl, cd = afBV(alpha,Re,M,env,Vtwist,c,dt,U;solvestep=false) with alpha in rad, OWENSAero.Env, V_twist in rad/s, c chord in m, dt in sec, U Vloc in m/s, solvestep true during solve loop\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSAero.readaerodyn_BV_NEW-Tuple{Any}","page":"API Reference","title":"OWENSAero.readaerodyn_BV_NEW","text":"readaerodyn_BV_NEW(filename;DynamicStallModel=\"BV\")\n\nfor a file with multiple reynolds numbers create airfoil lookup function with boeing vertol dynamic stall model and wrap interpolation\n\nInputs\n\nfilename::string: file path/name to airfoil file formatted like in the test folder\nDynamicStallModel::string: \"BV\" or \"none\"\n\nOutputs:\n\naf::function: cl, cd = afBV(alpha,Re,M,env,Vtwist,c,dt,U;solvestep=false) with alpha in rad, OWENSAero.Env, V_twist in rad/s, c chord in m, dt in sec, U Vloc in m/s, solvestep true during solve loop\naf::function: cl, cd = af(alpha,re,mach) with alpha in rad\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSAero.residual-NTuple{6, Any}","page":"API Reference","title":"OWENSAero.residual","text":"Internal, sets up the residual function\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSAero.setupTurb-NTuple{6, Any}","page":"API Reference","title":"OWENSAero.setupTurb","text":"setupTurb(bldx,bldz,B,chord,omega,Vinf;     Height = maximum(bldz),     Radius = maximum(bldx),     eta = 0.25,     twist = 0.0, #or array{Float,Nslices}     rho = 1.225,     mu = 1.7894e-5,     RPI = true,     tau = [0.3,3.0],     ntheta = 30,     Nslices = 30, #TODO: make this different from ntheta     ifw = false,     DynamicStallModel = \"BV\",     AeroModel = \"DMS\",     windangleD = 0.0,     afname = \"(path)/airfoils/NACA0015RE3E5.dat\", #TODO: analytical airfoil as default     turbsimfilename = \"(path)/data/ifw/turbDLC1p313mps330mseed1.bts\",     ifwlibfile = joinpath(dirname(@FILE), \"../bin/libifwcbinding\"),     AeroAddedMassActive = false,     AeroBuoyancyActive = false,     AeroRotAccelActive = false,     AddedMassCoeff_Ca = 1.0)\n\nInitializes aerodynamic models and sets up backend persistent memory to simplify intermittent calling within coupled solver loops\n\nInputs\n\nbld_x: Blade x shape\nbld_z: Blade z shape\nB: Number of blades\nchord: chord length (m)\nomega: rotation rate in rad/s.  size(1) or size(ntheta), pass in an array(Real,ntheta) when propogating automatic gradients\nVinf: Inflow velocity\nHeight:  turbine total height (m) typically maximum(bldz) unless only the shape and not size of bldz is being used\nRadius:  turbine nominal radius (m) typically maximum(bldx) unless only shape and not size of bldx is used\neta: blade mount point ratio, i.e. 0.25 would be at the quarter chord\ntwist: 0.0, #or array{Float,Nslices}\nrho: working fluid density (kg/m^3)\nmu:  working fluid dynamic viscosity (Pa*s)\nRPI: RPI method flag\ntau: Unsteady wake propogation time constants [0.3,3.0],\nntheta: Number of azimuthal discretizations\nNslices: Number of vertical slices of the turbine\nifw: flag for inflow wind\nDynamicStallModel:  Dynamic stall model \"BV\" or \"none\" or \"LB\" when we get it working\nAeroModel:  Aerodynamic model \"DMS\" or \"AC\"\nwindangle_D:  Inflow wind angle (degrees)\nafname: airfoil path and name e.g. \"(path)/airfoils/NACA0015RE3E5.dat\"\nturbsim_filename: turbsim path and name e.g. \"(path)/data/ifw/turbDLC1p313mps330mseed1.bts\",\nifw_libfile:  inflow wind dynamic library location e.g. joinpath(dirname(@FILE), \"../../../openfast/build/modules/inflowwind/libifwcbinding\"))\nAero_AddedMass_Active::bool: flag to turn on added mass effects\nAero_Buoyancy_Active::bool: flag to turn on buoyancy forces\nAero_RotAccel_Active::bool: flag to turn on the rotational acceleration portion of added mass for a crossflow turbine\nAddedMass_Coeff_Ca::float: added mass coefficient, typically 1.0\n\nOutputs:\n\nnone:\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSAero.steady-Tuple{Any, Any}","page":"API Reference","title":"OWENSAero.steady","text":"steady(turbine::Turbine, env::Env; w=zeros(Real,2*turbine.ntheta), idx_RPI=1:2*turbine.ntheta,solve=true,ifw=false)\n\nCalculates steady state aerodynamics for a single VAWT slice\n\nInputs\n\nturbine::Turbine: Turbine struct, see ?Turbine for details\nenv::Env: Env struct, see ?Env for details\nw::Array(<:Real): Optional, used if solve=false, induction factor array, first half corresponding to u, second half to v\nidx_RPI::Array(<:Int): Optional, used to specify the azimuthal indices needed for a partial solve (i.e. not every azimuthal index), such as is used in the RPI method\nsolve::Bool: Optional, False is used when you want the model outputs for a given set of induction factors without resolving them.\nifw::Bool: Optional, used to tell the Vinf lookup to attempt to use the dynamic inflow wind library, requires preprocessing as is shown in the test cases.\n\nOutputs:\n\nCP: This slice's coefficient of performance\nTh: This slice's thrust coefficient\nQ: Torque (N0m)\nRp: Radial force per height (N)\nTp: Tangential force per height (N)\nZp: Vertical force per height (N)\nVloc: Local velocity array for each azimuthal position (includes induction) (m/s)\nCD: This slice's drag coefficient\nCT: This slice's thrust coefficient (should equal drag, but may no depending on usage or solver status)\namean: Mean turbine induction in the streamwise direction\nastar: Solved induction factors for each azimuthal location. First half are streamwise (u), second are cross-steam (v)\nalpha: Local angle of attack array for each azimuthal position (includes induction) (rad)\ncl: Local lift coefficient used for each azimuthal position\ncd_af: Local drag coefficient used for each azimuthal position\nthetavec: Azimuthal location of each discretization (rad)\nRe: Reynolds number for each azimuthal position\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSAero.steadyTurb-Tuple{}","page":"API Reference","title":"OWENSAero.steadyTurb","text":"steadyTurb(omega,Vinf)\n\nRuns a previously initialized aero model (see ?setupTurb) in the steady state mode\n\nInputs\n\nomega::float: turbine rotation rate (rad/s)\nVinf::float: turbine steady inflow velocity (m/s)\n\nOutputs:\n\nCP: Turbine coefficient of performance\nRp: Array(B,Nslices,ntheta) of radial force (N)\nTp: Array(B,Nslices,ntheta) of tangential force (N)\nZp: Array(B,Nslices,ntheta) of vertical force (N)\nalpha: Array(B,Nslices,ntheta) of angle of attack (rad)\ncl: Array(B,Nslices,ntheta) of airfoil cl used\ncd_af: Array(B,Nslices,ntheta) of airfoil cd used\nVloc: Array(B,Nslices,ntheta) of airfoil local velocity used\nRe: Array(B,Nslices,ntheta) of airfoil Reynolds number used\nthetavec: Azimuthal discretization location (rad)\nntheta: number of azimuthal discretizations used\nFx_base: Array(ntheta)Turbine base Fx (N)\nFy_base: Array(ntheta)Turbine base Fy (N)\nFz_base: Array(ntheta)Turbine base Fz (N)\nMx_base: Array(ntheta)Turbine base Mx (N-m)\nMy_base: Array(ntheta)Turbine base My (N-m)\nMz_base: Array(ntheta)Turbine base Mz (N-m)\npower: Array(ntheta)Turbine power (watts)\npower2: Turbine average power for the revolution (watts)\ntorque: Array(ntheta)Turbine torque (N-m) (alternative calculation method from Mz-base)\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSAero.streamtube-NTuple{4, Any}","page":"API Reference","title":"OWENSAero.streamtube","text":"INTERNAL streamtube(a,theta,turbine,env;output_all=false,Vxwake=nothing,solvestep=false)\n\nDouble multiple streamtube individual streamtube calculation\n\nOutput:\n\nif outputall     return Th, Q, Rp, Tp, Zp, Vloc, CD, CT, alpha, cl, cdaf, Re else     return CD-CT # Residual, section 2.4 end\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSAero.trapz-Tuple{Any, Any}","page":"API Reference","title":"OWENSAero.trapz","text":"Internal, trapezoidal integration of y w.r.t. x\n\n\n\n\n\n","category":"method"},{"location":"#OWENSAero.jl","page":"Home","title":"OWENSAero.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This repository contains a set of aerodynamic tools for VAWTs both steady and unsteady operation, 2D and 3D (stacked 2D) convenience functions along with coupling to NREL's InflowWind for turbulent inflow. You will need to provide your own .bts files from turbsim (compile or download OpenFAST and use the turbsim binary with an .inp file.  There is an example in the test/data/ifw folder)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Double Multiple Streamtube implementation per https://doi.org/10.5194/wes-2019-44","category":"page"},{"location":"","page":"Home","title":"Home","text":"Actuator Cylinder Implementation from https://github.com/byuflowlab/vawt-ac (updated and modified)","category":"page"},{"location":"","page":"Home","title":"Home","text":"CACTUS Dynamic Stall models https://github.com/sandialabs/CACTUS","category":"page"},{"location":"","page":"Home","title":"Home","text":"3D VAWT error resolution and unsteady method numerical acceleration (RPI) per https://arc.aiaa.org/doi/abs/10.2514/1.J060476","category":"page"}]
}
